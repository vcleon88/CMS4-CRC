import os
import glob
import pandas as pd
from radiomics import featureextractor
import SimpleITK as sitk
from tqdm import tqdm

# === Define paths ===
image_dir = "path/to/images"      # Folder containing MRI images
mask_dir = "path/to/masks"        # Folder containing segmentation masks
output_csv = "radiomics_features.csv"  # Output file for extracted features

# === Optional: Load parameter file for feature settings ===
param_file = "params.yaml"  # Leave as None to use default settings

# Initialize feature extractor
if param_file:
    extractor = featureextractor.RadiomicsFeatureExtractor(param_file)
else:
    extractor = featureextractor.RadiomicsFeatureExtractor()

# Enable verbose logging if needed
# extractor.enableAllFeatures()
# extractor.enableImageTypes(Original={}, LoG={}, Wavelet={})

# List all image files
image_files = sorted(glob.glob(os.path.join(image_dir, "*.nii.gz")))
mask_files = sorted(glob.glob(os.path.join(mask_dir, "*.nii.gz")))

# Check that image-mask pairs are matched
assert len(image_files) == len(mask_files), "Number of images and masks must match."

# Store all extracted feature dictionaries
all_features = []

# === Loop over each image-mask pair ===
for img_path, msk_path in tqdm(zip(image_files, mask_files), total=len(image_files)):
    image = sitk.ReadImage(img_path)
    mask = sitk.ReadImage(msk_path)

    try:
        result = extractor.execute(image, mask)

        # Keep only feature values (exclude metadata like 'diagnostics_*')
        features = {k: v for k, v in result.items() if not k.startswith('diagnostics')}
        features['PatientID'] = os.path.basename(img_path).replace(".nii.gz", "")

        all_features.append(features)

    except Exception as e:
        print(f"Failed to process {img_path}: {e}")

# === Save extracted features to CSV ===
df = pd.DataFrame(all_features)
df.to_csv(output_csv, index=False)
print(f"Feature extraction complete. Saved to {output_csv}")
